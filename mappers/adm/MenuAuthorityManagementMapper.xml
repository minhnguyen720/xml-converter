<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dou.adm.mappers.MenuAuthorityManagementMapper">

    <resultMap id="AdmMnuPgmVOMap" type="AdmMnuPgmVO">
        <result property="mnuPgmId" column="mnuPgmId" javaType="String" />
        <result property="prntId" column="prntId" javaType="String" />
        <result property="mnuPgmNm" column="mnuPgmNm" javaType="String" />
        <result property="mnuPgmOrdNo" column="mnuPgmOrdNo" javaType="Integer" />
        <result property="authority" column="authority" javaType="String" />
        <result property="level" column="level" javaType="Integer" />
    </resultMap>

    <select id="selectMenuXMLRoleMgnt" parameterType="hashMap" resultMap="AdmMnuPgmVOMap">
        <if test="isAdmin != &quot;true&quot;">
            /** Pim.ProgramMgt.selectChildProjectXml*/
            SELECT MNU_PGM_ID AS "mnuPgmId",
            PRNT_MNU_ID AS "prntId",
            MNU_PGM_NM AS "mnuPgmNm",
            MNU_PGM_ORD_NO AS "mnuPgmOrdNo",
            AUTH AS "authority",
            LEVEL AS "level"
            FROM
            (SELECT PGM.MNU_PGM_ID,
            PGM.PRNT_MNU_ID,
            PGM.MNU_PGM_NM,
            PGM.MNU_PGM_ORD_NO,
            DECODE (
            (SELECT ADM_ROLE_PGM_AUTH.MNU_PGM_ID FROM ADM_ROLE_PGM_AUTH WHERE ADM_ROLE_PGM_AUTH.MNU_PGM_ID =
            PGM.MNU_PGM_ID
            AND ADM_ROLE_PGM_AUTH.ROLE_ID = #{roleId}
            AND ROWNUM = 1
            ),NULL,'N','Y' ) AUTH
            FROM ADM_MNU_PGM PGM ,
            ( SELECT DISTINCT MNU_PGM_ID
            FROM ADM_ROLE_PGM_AUTH,
            (SELECT DISTINCT ROLE_ID FROM ADM_PJT_USR WHERE USR_ID = #{usrId}
            UNION
            SELECT DISTINCT ROLE_ID
            FROM ADM_USR_ROLE
            WHERE USR_ID = #{usrId}
            )TB_RL
            WHERE ADM_ROLE_PGM_AUTH.ROLE_ID = TB_RL.ROLE_ID
            ) AU
            WHERE 1 = 1
            AND PGM.MNU_PGM_ID = AU.MNU_PGM_ID
            AND PGM.DELT_STS_FLG = 'N'
            AND PGM.MNU_USD = 'Y'
            AND PGM.POPUP_FLG = 'N'
            )TB
            START WITH PRNT_MNU_ID = '0'
            CONNECT BY prior MNU_PGM_ID = PRNT_MNU_ID
            ORDER SIBLINGS BY MNU_PGM_ORD_NO
        </if>
        <if test="isAdmin == &quot;true&quot;">
            /** mcm.AuthorityManagement.selectMenuXMLRoleMgnt */
            SELECT
                mnu_pgm_id AS "mnuPgmId",
                prnt_mnu_id AS "prntId",
                mnu_pgm_nm AS "mnuPgmNm",
                mnu_pgm_ord_no AS "mnuPgmOrdNo",
                DECODE( (
                    SELECT
                        au.mnu_pgm_id
                    FROM
                        adm_role_pgm_auth au
                    WHERE
                        au.mnu_pgm_id = adm_mnu_pgm.mnu_pgm_id
                        AND   role_id = #{roleId}
                        AND   ROWNUM = 1
                ),NULL,'N','Y') AS "authority",
                level AS "level"
            FROM
                adm_mnu_pgm
            WHERE
                1 = 1
                AND   delt_sts_flg = 'N'
                AND   popup_flg = 'N'
                AND   mnu_usd = 'Y'
                AND   PJT_ID = #{pjtId}
            START WITH
                prnt_mnu_id = '0'
            CONNECT BY
                PRIOR mnu_pgm_id = prnt_mnu_id
            ORDER SIBLINGS BY
                mnu_pgm_ord_no,
                upper(mnu_pgm_nm)
        </if>
    </select>

    <resultMap id="AdmMnuPgmVOByListRoleMap" type="AdmMnuPgmVO">
        <result property="mnuPgmId" column="mnuPgmId" javaType="String" />
        <result property="prntId" column="prntId" javaType="String" />
        <result property="mnuPgmNm" column="mnuPgmNm" javaType="String" />
        <result property="mnuPgmUrl" column="mnuPgmUrl" javaType="String" />
        <result property="mnuPgmOrdNo" column="mnuPgmOrdNo" javaType="Integer" />
        <result property="authority" column="authority" javaType="String" />
        <result property="level" column="level" javaType="Integer" />
    </resultMap>

    <select id="selectMenuByListRoleId" parameterType="hashMap" resultMap="AdmMnuPgmVOByListRoleMap">
            /** mcm.AuthorityManagement.selectMenuXMLRoleMgnt */
            SELECT
            mnu_pgm_id AS "mnuPgmId",
            prnt_mnu_id AS "prntId",
            mnu_pgm_nm AS "mnuPgmNm",
            mnu_pgm_ord_no AS "mnuPgmOrdNo",
            mnu_pgm_url_html as "mnuPgmUrl",
            DECODE( (
            SELECT
            au.mnu_pgm_id
            FROM
            adm_role_pgm_auth au
            WHERE
            au.mnu_pgm_id = adm_mnu_pgm.mnu_pgm_id
            AND   role_id in
            <foreach collection="roleIdList" item="item" separator="," close=")" open="(">
                #{item}
            </foreach>
            AND   ROWNUM = 1
            ),NULL,'N','Y') AS "authority",
            level AS "level"
            FROM
            adm_mnu_pgm
            WHERE
            1 = 1
            AND   delt_sts_flg = 'N'
            AND   popup_flg = 'N'
            AND   mnu_usd = 'Y'
            AND   PJT_ID = #{pjtId}
            START WITH
            prnt_mnu_id = '0'
            CONNECT BY
            PRIOR mnu_pgm_id = prnt_mnu_id
            ORDER SIBLINGS BY
            mnu_pgm_ord_no,
            upper(mnu_pgm_nm)
    </select>

    <resultMap id="AdmRolePgmAuthMap" type="AdmRolePgmAuthVO">
        <result property="mnuPgmId" column="MNU_PGM_ID" javaType="String" />
        <result property="roleId" column="ROLE_ID" javaType="String" />
        <result property="createUser" column="cre_usr_id" />
        <result property="updateUser" column="upd_usr_id" />
        <result property="createDate" column="cre_dt" />
        <result property="updateDate" column="upd_dt" />
    </resultMap>

    <select id="selectRolePgmAuth" parameterType="AdmRolePgmAuthVO" resultMap="AdmRolePgmAuthMap">
        select /** mcm.AuthorityManagement.selectRolePgmAuth */
        MNU_PGM_ID,
        ROLE_ID,
        cre_usr_id, cre_dt, upd_usr_id, upd_dt
        from ADM_ROLE_PGM_AUTH
        where 1 = 1
        <if test="mnuPgmId != null and mnuPgmId != ''">
            and MNU_PGM_ID = #{mnuPgmId}
        </if>
        <if test="roleId != null and roleId != ''">
            and ROLE_ID = #{roleId}
        </if>
    </select>

    <resultMap id="BtnAuthVOMap" type="BtnAuthVO">
        <result property="btnNo" column="BTN_NO" javaType="String" />
        <result property="btnNm" column="BTN_NM" javaType="String" />
        <result property="createUser" column="cre_usr_id" />
        <result property="updateUser" column="upd_usr_id" />
        <result property="createDate" column="cre_dt" />
        <result property="updateDate" column="upd_dt" />
    </resultMap>

    <select id="selectButtonByMenu" parameterType="hashMap" resultMap="BtnAuthVOMap">
        select /** mcm.AuthorityManagement.selectButtonByMenu */
            ADM_BTN_AUTH.BTN_NO,
            ADM_BTN_AUTH.BTN_NM,
            ADM_MNU_PGM_BTN.CRE_USR_ID,
            ADM_MNU_PGM_BTN.UPD_USR_ID,
            ADM_MNU_PGM_BTN.CRE_DT,
            ADM_MNU_PGM_BTN.UPD_DT
        from ADM_MNU_PGM_BTN,
             ADM_BTN_AUTH
        where 1 = 1
          and ADM_MNU_PGM_BTN.BTN_NO = ADM_BTN_AUTH.BTN_NO
          and MNU_PGM_ID = #{mnuPgmId}
    </select>

    <resultMap id="AdmRolePgmBtnAuthMap" type="AdmRolePgmBtnAuthVO">
        <result property="btnNo" column="BTN_NO" javaType="String" />
        <result property="roleId" column="ROLE_ID" javaType="String" />
        <result property="mnuPgmId" column="MNU_PGM_ID" javaType="String" />
        <result property="createUser" column="cre_usr_id" />
        <result property="updateUser" column="upd_usr_id" />
        <result property="createDate" column="cre_dt" />
        <result property="updateDate" column="upd_dt" />
    </resultMap>

    <select id="selectButtonByAuthority" parameterType="hashMap" resultMap="AdmRolePgmBtnAuthMap">
        select /** mcm.AuthorityManagement.selectButtonByAuthority */
        BTN_NO,
        ROLE_ID,
        MNU_PGM_ID,
        cre_usr_id, cre_dt, upd_usr_id, upd_dt
        from ADM_ROLE_PGM_BTN_AUTH
        where 1 = 1
        <if test="roleId != null and roleId != ''">
            and ROLE_ID = #{roleId}
        </if>
        <if test="mnuPgmId != null and mnuPgmId != ''">
            and MNU_PGM_ID = #{mnuPgmId}
        </if>
        <if test="btnNo != null and btnNo != ''">
            and BTN_NO = #{btnNo}
        </if>
    </select>

    <select id="selectButtonByRoleList" parameterType="hashMap" resultMap="BtnAuthVOMap">
        select DISTINCT /** mcm.AuthorityManagement.selectButtonByAuthority */
        admRole.BTN_NO,
        admAuth.BTN_NM
        from adm_role_pgm_btn_auth  admRole,
        adm_btn_auth     admAuth,
        adm_mnu_pgm_btn admMnu
        where 1 = 1
        and  admRole.btn_no =  admAuth.btn_no
        and  admRole.btn_no =  admMnu.btn_no
        and admRole.role_id in
        <foreach collection="roleIdList" item="item" separator="," close=")" open="(">
            #{item}
        </foreach>
        <if test="mnuPgmId != null and mnuPgmId != ''">
            and admRole.MNU_PGM_ID = #{mnuPgmId}
        </if>
    </select>

    <select id="selectCountButtonByUserIdAndMnuPgmId" parameterType="hashMap" resultType="Integer">
        select count(BTN_NO)
        from ADM_ROLE_PGM_BTN_AUTH auth,
             ADM_MNU_PGM mnu
        where 1 = 1
          and mnu.MNU_PGM_ID = auth.MNU_PGM_ID
          and mnu.MNU_PGM_URL_HTML = #{mnuPgmId}
          and auth.BTN_NO = #{btnNo}
          and ROLE_ID IN (
            select ROLE_ID
            from (
                     select distinct ADM_ROLE.ROLE_ID
                     from ADM_USR_ROLE,
                          ADM_ROLE
                     where 1 = 1
                       and ADM_USR_ROLE.ROLE_ID = ADM_ROLE.ROLE_ID
                       and ADM_USR_ROLE.USR_ID = #{usrId}
                     union
                     select distinct ROLE_ID
                     from ADM_PJT_USR USR,
                          ADM_PJT PJT
                     where 1 = 1
                       and USR.PJT_ID = PJT.PJT_ID
                       <if test="pjtId != null and pjtId != '' ">
                        and USR.PJT_ID = #{pjtId}
                        </if>
                       and PJT.USE_FLG = 'Y'
                       and USR.USR_ID = #{usrId}
                 )
            )
    </select>

    <select id="selectButtonByUserIdAndMnuPgmId" parameterType="hashMap" resultType="hashMap">
        <if test="master == false">
        select distinct auth.BTN_NO
        from ADM_ROLE_PGM_BTN_AUTH auth,
             ADM_MNU_PGM mnu
        where 1 = 1
          and mnu.MNU_PGM_ID = auth.MNU_PGM_ID
          and mnu.MNU_PGM_URL_HTML = #{mnuPgmId}
          and ROLE_ID IN (
            select ROLE_ID
            from (
                     select distinct ADM_ROLE.ROLE_ID
                     from ADM_USR_ROLE,
                          ADM_ROLE
                     where 1 = 1
                       and ADM_USR_ROLE.ROLE_ID = ADM_ROLE.ROLE_ID
                       and ADM_USR_ROLE.USR_ID = #{usrId}
                     union
                     select distinct ROLE_ID
                     from ADM_PJT_USR USR,
                          ADM_PJT PJT
                     where 1 = 1
                       and USR.PJT_ID = PJT.PJT_ID
                       <if test="pjtId != null and pjtId != '' ">
                           and USR.PJT_ID = #{pjtId}
                       </if>
                       and PJT.USE_FLG = 'Y'
                       and USR.USR_ID = #{usrId}
                 )
            )
          </if>
        <if test="master == true">
            SELECT /** mcm.AuthorityManagement.selectButtonByMenu */
                adm_btn_auth.btn_no
                FROM
                adm_btn_auth
         </if>
    </select>

    <resultMap type="AdmMnuPgmVO" id="ListMenuResultMap">
        <result property="mnuPgmId" column="MNU_PGM_ID" javaType="String" />
        <result property="prntId" column="PRNT_MNU_ID" javaType="String" />
        <result property="mnuPgmNm" column="MNU_PGM_NM" javaType="String" />
        <result property="mnuPgmUrl" column="MNU_PGM_URL_HTML" javaType="String" />
        <result property="mnuPgmOrdNo" column="MNU_PGM_ORD_NO" javaType="Integer" />
    </resultMap>

    <select id="loadMenuForAdmin" resultMap="ListMenuResultMap">
        select /** mcm.MenuProgramManagement.loadMenuForAdmin */
            MNU_PGM_ID,
            MNU_PGM_NM,
            PRNT_MNU_ID,
            MNU_PGM_URL_HTML,
            MNU_PGM_ORD_NO
        from (
                 select distinct MNU_PGM_ID,
                                 MNU_PGM_NM,
                                 PRNT_MNU_ID,
                                 NVL(MNU_PGM_URL_HTML, 'null') MNU_PGM_URL_HTML,
                                 MNU_PGM_ORD_NO
                 from ADM_MNU_PGM
                 where MNU_USD = 'Y'
                   and POPUP_FLG = 'N'
                   and DELT_STS_FLG = 'N'
                   and POPUP_FLG = 'N'
             )
        start with PRNT_MNU_ID = '0'
        connect by prior MNU_PGM_ID = PRNT_MNU_ID
        order SIBLINGS by MNU_PGM_ORD_NO, MNU_PGM_NM ASC
    </select>

    <select id="loadFavoriteMenuForUser" resultMap="ListMenuResultMap">
        SELECT
        PGM.MNU_PGM_ID,
        PGM.MNU_PGM_NM,
        PGM.PRNT_MNU_ID,
        PGM.MNU_PGM_URL_HTML,
        PGM.MNU_PGM_ORD_NO
        FROM ADM_FAV_MNU_USR FAV,ADM_MNU_PGM PGM
        WHERE 1 = 1
        <if test="usrId != null">
            AND FAV.USR_ID = #{usrId}
        </if>
        AND PGM.MNU_USD = 'Y'
        AND PGM.POPUP_FLG ='N'
        AND PGM.DELT_STS_FLG = 'N'
        AND PGM.POPUP_FLG ='N'
        AND FAV.MNU_PGM_URL = PGM.MNU_PGM_URL_HTML
        <if test="menuLst != null and menuLst.size() &gt; 0">
            <trim prefix="AND PGM.MNU_PGM_URL_HTML in ">
                <foreach item="item" index="index" collection="menuLst" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </trim>
        </if>
        ORDER BY FAV.CLK_NO DESC
    </select>

    <delete id="deleteButtonAuthorityInRole" parameterType="hashMap">
		delete /** mcm.AuthorityManagement.deleteButtonAuthorityInRole */
			ADM_ROLE_PGM_BTN_AUTH
		where 1 =1
			and MNU_PGM_ID = #{mnuPgmId}
			and ROLE_ID = #{roleId}
	</delete>

    <select id="loadMenuForUser" resultMap="ListMenuResultMap">
        select /** mcm.MenuProgramManagement.loadMenuForUser */
        MNU_PGM_ID,
        MNU_PGM_NM,
        PRNT_MNU_ID,
		NVL(MNU_PGM_URL_HTML, 'null') MNU_PGM_URL_HTML,
        MNU_PGM_ORD_NO
        from (
        select distinct
        C.MNU_PGM_ID,
        C.MNU_PGM_NM,
        C.PRNT_MNU_ID,
        C.MNU_PGM_URL_HTML,
        C.MNU_PGM_ORD_NO
        from
        ADM_ROLE_PGM_AUTH A,
        ADM_MNU_PGM C
        where
        A.ROLE_ID in
        <foreach item="item" index="index" collection="lstUsrRoleType" open="(" separator="," close=")">
            #{item}
        </foreach>
        and A.MNU_PGM_ID = C.MNU_PGM_ID
        and MNU_USD = 'Y'
        and DELT_STS_FLG = 'N'
        and POPUP_FLG ='N'
        )
        start with PRNT_MNU_ID = '0'
        connect by prior MNU_PGM_ID = PRNT_MNU_ID
        order SIBLINGS by MNU_PGM_ORD_NO, MNU_PGM_NM ASC
    </select>

    <select id="selectRoleInUsrRole" resultType="String" parameterType="String">
		select
			ROLE_ID
		from
			ADM_USR_ROLE
		where
			ROLE_ID = #{roleId}
		and ROWNUM = 1
    </select>

    <select id="selectRoleInRolePgmAuth" resultType="String" parameterType="String">
		select
			ROLE_ID
		from
			ADM_ROLE_PGM_AUTH
		where
			ROLE_ID = #{roleId}
		and ROWNUM = 1
	</select>

    <update id="mergeButtonHit" parameterType= "AdmBtnHitVO">
        /** MenuAuthorityManagementMapper.mergeButtonHit */
        MERGE INTO ADM_BTN_USR_IR USING dual ON (
        usr_id = #{usrId}
        AND btn_no = #{btnNo}
        AND mnu_pgm_url = #{mnuPgmUrl}
        )
        WHEN MATCHED THEN
        UPDATE
        SET
        co_cd = #{coCd},
        IR_NO  = IR_NO + 1,
        upd_dt = SYSDATE,
        upd_usr_id = #{usrId}
        WHEN NOT MATCHED THEN
        INSERT (
            btn_no,
            co_cd,
            cre_dt,
            cre_usr_id,
            IR_NO,
            mnu_pgm_url,
            upd_dt,
            upd_usr_id,
            usr_id
        )
        VALUES
        (
            #{btnNo},
            #{coCd},
            sysdate,
            #{usrId},
            1,
            #{mnuPgmUrl},
            sysdate,
            #{usrId},
            #{usrId}
        )
    </update>
</mapper>